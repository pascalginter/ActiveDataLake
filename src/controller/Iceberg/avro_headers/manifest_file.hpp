/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* This code was generated by avrogencpp 1.13.0-SNAPSHOT. Do not edit.*/

#ifndef MANIFEST_FILE_HPP_3106612428_H
#define MANIFEST_FILE_HPP_3106612428_H


#include <sstream>
#include <any>
#include <utility>
#include "avro/Specific.hh"
#include "avro/Encoder.hh"
#include "avro/Decoder.hh"

struct _manifest_file_json_Union__0__ {
private:
    size_t idx_;
    std::any value_;
public:
    /** enum representing union branches as returned by the idx() function */
    enum class Branch: size_t {
        null = 0,
        long_ = 1,
    };
    size_t idx() const { return idx_; }
    Branch branch() const { return static_cast<Branch>(idx_); }
    bool is_null() const {
        return (idx_ == 0);
    }
    void set_null() {
        idx_ = 0;
        value_ = std::any();
    }
    const int64_t& get_long() const;
    int64_t& get_long();
    void set_long(const int64_t& v);
    void set_long(int64_t&& v);
    _manifest_file_json_Union__0__();
};

struct data_file_descr {
    int32_t content;
    std::string file_path;
    std::string file_format;
    std::string partition;
    int64_t record_count;
    int64_t file_size_in_bytes;
    data_file_descr() :
        content(int32_t()),
        file_path(std::string()),
        file_format(std::string()),
        partition(std::string()),
        record_count(int64_t()),
        file_size_in_bytes(int64_t())
        { }
};

struct manifest_entry {
    typedef _manifest_file_json_Union__0__ snapshot_id_t;
    typedef _manifest_file_json_Union__0__ sequence_number_t;
    typedef _manifest_file_json_Union__0__ file_sequence_number_t;
    int32_t status;
    snapshot_id_t snapshot_id;
    sequence_number_t sequence_number;
    file_sequence_number_t file_sequence_number;
    data_file_descr data_file;
    manifest_entry() :
        status(int32_t()),
        snapshot_id(snapshot_id_t()),
        sequence_number(sequence_number_t()),
        file_sequence_number(file_sequence_number_t()),
        data_file(data_file_descr())
        { }
};

inline
const int64_t& _manifest_file_json_Union__0__::get_long() const {
    if (idx_ != 1) {
        throw avro::Exception("Invalid type for union _manifest_file_json_Union__0__");
    }
    return *std::any_cast<int64_t >(&value_);
}

inline
int64_t& _manifest_file_json_Union__0__::get_long() {
    if (idx_ != 1) {
        throw avro::Exception("Invalid type for union _manifest_file_json_Union__0__");
    }
    return *std::any_cast<int64_t >(&value_);
}

inline
void _manifest_file_json_Union__0__::set_long(const int64_t& v) {
    idx_ = 1;
    value_ = v;
}

inline
void _manifest_file_json_Union__0__::set_long(int64_t&& v) {
    idx_ = 1;
    value_ = std::move(v);
}

inline _manifest_file_json_Union__0__::_manifest_file_json_Union__0__() : idx_(0) { }
namespace avro {
template<> struct codec_traits<_manifest_file_json_Union__0__> {
    static void encode(Encoder& e, _manifest_file_json_Union__0__ v) {
        e.encodeUnionIndex(v.idx());
        switch (v.idx()) {
        case 0:
            e.encodeNull();
            break;
        case 1:
            avro::encode(e, v.get_long());
            break;
        }
    }
    static void decode(Decoder& d, _manifest_file_json_Union__0__& v) {
        size_t n = d.decodeUnionIndex();
        if (n >= 2) { throw avro::Exception("Union index too big"); }
        switch (n) {
        case 0:
            d.decodeNull();
            v.set_null();
            break;
        case 1:
            {
                int64_t vv;
                avro::decode(d, vv);
                v.set_long(std::move(vv));
            }
            break;
        }
    }
};

template<> struct codec_traits<data_file_descr> {
    static void encode(Encoder& e, const data_file_descr& v) {
        avro::encode(e, v.content);
        avro::encode(e, v.file_path);
        avro::encode(e, v.file_format);
        avro::encode(e, v.partition);
        avro::encode(e, v.record_count);
        avro::encode(e, v.file_size_in_bytes);
    }
    static void decode(Decoder& d, data_file_descr& v) {
        if (avro::ResolvingDecoder *rd =
            dynamic_cast<avro::ResolvingDecoder *>(&d)) {
            const std::vector<size_t> fo = rd->fieldOrder();
            for (std::vector<size_t>::const_iterator it = fo.begin();
                it != fo.end(); ++it) {
                switch (*it) {
                case 0:
                    avro::decode(d, v.content);
                    break;
                case 1:
                    avro::decode(d, v.file_path);
                    break;
                case 2:
                    avro::decode(d, v.file_format);
                    break;
                case 3:
                    avro::decode(d, v.partition);
                    break;
                case 4:
                    avro::decode(d, v.record_count);
                    break;
                case 5:
                    avro::decode(d, v.file_size_in_bytes);
                    break;
                default:
                    break;
                }
            }
        } else {
            avro::decode(d, v.content);
            avro::decode(d, v.file_path);
            avro::decode(d, v.file_format);
            avro::decode(d, v.partition);
            avro::decode(d, v.record_count);
            avro::decode(d, v.file_size_in_bytes);
        }
    }
};

template<> struct codec_traits<manifest_entry> {
    static void encode(Encoder& e, const manifest_entry& v) {
        avro::encode(e, v.status);
        avro::encode(e, v.snapshot_id);
        avro::encode(e, v.sequence_number);
        avro::encode(e, v.file_sequence_number);
        avro::encode(e, v.data_file);
    }
    static void decode(Decoder& d, manifest_entry& v) {
        if (avro::ResolvingDecoder *rd =
            dynamic_cast<avro::ResolvingDecoder *>(&d)) {
            const std::vector<size_t> fo = rd->fieldOrder();
            for (std::vector<size_t>::const_iterator it = fo.begin();
                it != fo.end(); ++it) {
                switch (*it) {
                case 0:
                    avro::decode(d, v.status);
                    break;
                case 1:
                    avro::decode(d, v.snapshot_id);
                    break;
                case 2:
                    avro::decode(d, v.sequence_number);
                    break;
                case 3:
                    avro::decode(d, v.file_sequence_number);
                    break;
                case 4:
                    avro::decode(d, v.data_file);
                    break;
                default:
                    break;
                }
            }
        } else {
            avro::decode(d, v.status);
            avro::decode(d, v.snapshot_id);
            avro::decode(d, v.sequence_number);
            avro::decode(d, v.file_sequence_number);
            avro::decode(d, v.data_file);
        }
    }
};

}
#endif
